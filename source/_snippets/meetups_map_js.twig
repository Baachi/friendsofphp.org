<script src="https://unpkg.com/leaflet@1.3.2/dist/leaflet.js"
        integrity="sha512-2fA79E27MOeBgLjmBrtAgM/20clVSV8vJERaW/EcnnWCVGwQRazzKtQS1kIusCZv1PtaQxosDZZ0F1Oastl55w=="
        crossorigin=""></script>

<script type="text/javascript">
    var icons = {
        green: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png'
    };

    var markers = [
        {% set markers %}
            {% for meetup in meetups %}
                {% set daysFromToday = diffFromTodayInDays(meetup.start) %}

                {% if daysFromToday >= 0 %}
                    {
                        "type": "green",
                        "title": "{{ meetup.name }}",
                        "position": [{{ meetup.latitude }}, {{ meetup.longitude }}],
                        "date": "{{ meetup.start|date("m-d") }}",
                        "location": "{{ meetup.city }}",
                        "url": "{{ meetup.url }}"
                    },
                {% endif %}
            {% endfor %}
        {% endset %}

        {{ markers|trim|trim(',', 'right')|raw }}
    ];

    var grouped = {};

    for (var i in markers) {
        var marker = markers[i];

        if (typeof grouped[marker.location] == 'undefined') {
            grouped[marker.location] = {
                type: marker.type,
                position: marker.position,
                markers: []
            };
        }

        grouped[marker.location].markers.push(marker);
    }

    var map = L.map('{{ map_id }}');

    // fit to bounds, so pc and mobile have same content
    // https://leafletjs.com/reference-1.3.2.html#latlngbounds

    // reconstruction from serialized object is not completely working, so we need to restore it manually
    var restoreBoundFromString = function(stringBound) {
        pastBounds = JSON.parse(stringBound);
        return L.latLngBounds(
            L.latLng(pastBounds._northEast.lat, pastBounds._northEast.lng),
            L.latLng(pastBounds._southWest.lat, pastBounds._southWest.lng)
        );
    };

    // like $_GET['name'] in PHP
    var get = function (name) {
        var results = new RegExp('[\?&]' + name + '=([^&]*)').exec(window.location.href);
        if (results == null) {
            return null;
        } else {
            return results[1] || 0;
        }
    };

    // get url bounds
    var pastBounds = window.localStorage.getItem('bounds');

    // @see https://stackoverflow.com/a/36444134/1348344
    var isRefreshed = performance.navigation.type;

    if (get('lat') && get('lon') && isRefreshed === 0) {
        map.setView([get('lat'), get('lon')], 7);
    } else if (pastBounds) {
        map.fitBounds(restoreBoundFromString(pastBounds));
    } else {
        // default map - the whole world
        map.setView([25, 0], 2);
    }

    // store past location when map mooves
    map.on('moveend', function(e) {
        var bounds = map.getBounds();
        // objects needs to serialize, since only string can be saved: https://stackoverflow.com/a/2010948/1348344
        window.localStorage.setItem('bounds', JSON.stringify(bounds));
    });

    // required and nice to have promotion to great tool
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    for (var i in grouped) {
        var group = grouped[i];

        var description = '';
        for (var j in group.markers) {
            marker = group.markers[j];

            var url = '<a class="text-bold block text-primary" href="'+marker.url+'" target="_blank" rel="noreferrer noopener"><strong>'+marker.title+'</strong></a>';

            description +=
                '<div class="text-center"><p class="m-b-5">' + url + '</p>' +
                '<p class="m-b-5 m-t-0">' +
                '<em class="fa fa-calendar fa-fw"></em>&nbsp; ' + marker.date +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                '<em class="fa fa-map-marker fa-fw"></em> '+ marker.location +
                '</p></div>'
            ;
        }

        var icon = new L.Icon({
            iconUrl: icons[group.type],
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34]
        });

        L.marker(group.position, { icon: icon }).bindPopup(description).addTo(map);
    }
</script>
